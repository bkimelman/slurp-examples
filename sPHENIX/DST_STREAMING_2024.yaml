#_______________________________________________________________________________________________________DST_EVENT__
#
# kaedama.py --rule DST_EVENT --config examples/sPHENIX/DST_EVENT_aua23.yaml --runs ...
#
DST_COSMICS:
 
   # At the moment, an extra _ in here will throw off cups b/c it parses out 
   # run, build, dsttype, etc... from the output filename... so DST_COSMICS_run1aua
   # will need to wait...
   params:
     name:       DST_COSMICS_run2pp
     build:      new
     build_name: new
     dbtag:      2023p013
     logbase :   $(name)_$(build)_$(tag)-$INT(run,%08d)-$INT(seg,%04d)
     outbase :   $(name)_$(build)_$(tag)
     script  :   run_cosmics.sh
     payload :   ./slurp-examples/sPHENIX/cosmics/
     mem     :   8192MB
     neventsper: 500

   #
   # input query:
   #
   # This builds a list of all runs known to the file catalog "datasets" table.
   # The query should return:
   # 1. The source of the information (formatted as database name/table name)
   # 2. The run number
   # 3. A sequence number (a placeholder fixed at zero for event builders)
   # 4. And a space-separated list of logical filenames 
   #
   # The {*_condition} parameters (run, seg, limit) are substituted by kaedama
   # based on (optional) command line options.
   #
   # For now, require GL1 files...
   #
   input:
      db: daqdb
      direct_path: /sphenix/lustre01/sphnxpro/commissioning/*/cosmics/
      query: |-
         select 
                'daqdb/filelist'                                                                                    as source      , 
                runnumber                                                                                                          , 
                0                                                                                                   as segment     , 
                string_agg( distinct split_part(filename,'/',-1), ' ' )                                             as files       ,   
                string_agg( distinct split_part(filename,'/',-1) || ':' || firstevent || ':' || lastevent, ' ' )    as fileranges  
         from  
                filelist
         where 
           ( 
             (filename  like '/bbox%/TPC%cosmics%.evt'   and lastevent>2 ) or
             (filename  like '/bbox%/TPOT%cosmics%.evt'  and lastevent>2 ) or
             (filename  like '/bbox%/cosmics_intt%.evt'  and lastevent>2 ) or
             (filename  like '/bbox%/GL1_cosmics%'       and lastevent>2 ) or
             (filename  like '/bbox%/cosmics_mvtx%.evt'  and lastevent>2 )
           )
                {run_condition}

         group by runnumber
         having
                every(transferred_to_sdcc)   and
                max(lastevent)>1000          and
                sum( case when filename like '/bbox%/GL1_cosmics%' then 1 else 0 end )>0 and
                (
                   sum( case when filename like '/bbox%/TPC%cosmics%' then 1 else 0 end )>0 or
                   sum( case when filename like '/bbox%/TPOT%cosmics%' then 1 else 0 end )>0 or
                   sum( case when filename like '/bbox%/cosmics%intt%' then 1 else 0 end )>0 or
                   sum( case when filename like '/bbox%/cosmics%mvtx%' then 1 else 0 end )>0 
                )
         order by runnumber
                {limit_condition}
              ;              

   # TODO:  Need to add error checking to make sure that outdir, logdir, etc... are quoted properly.  Else, this will cause problems with argument substitution
   filesystem:  
     outdir : "/sphenix/lustre01/sphnxpro/commissioning/slurp/tpccosmics/run_$(rungroup)"
     logdir : "file:///sphenix/data/data02/sphnxpro/testlogs/run_$(rungroup)"
     condor :        "/tmp/testlogs/run_$(rungroup)"

   #
   # Again I note the need to ensure that the arguments are properly specified given the
   # definition of the payload script.
   #
   job:
     executable            : "{payload}/run_cosmics.sh"
     arguments             : "$(nevents) {outbase} {logbase} $(run) $(seg) {outdir} $(build) $(tag) $(inputs) $(ranges) {neventsper}"
     output_destination    : '{logdir}'
     transfer_input_files  : "{payload},cups.py,odbc.ini"
     output                : '{logbase}.condor.stdout'
     error                 : '{logbase}.condor.stderr'
     log                   : '{condor}/{logbase}.condor'
     accounting_group      : "group_sphenix.mdc2"
     accounting_group_user : "sphnxpro"
     transfer_output_files : '{logbase}.out,{logbase}.err'
#    transfer_output_files : 'stdout.log,stderr.log'
     priority : '3800'

#_______________________________________________________________________________________________________DST_EVENT__
#
# kaedama.py --rule DST_EVENT --config examples/sPHENIX/DST_EVENT_aua23.yaml --runs ...
#
DST_TPCCALIB:
 
   # DST_EVENT works from a pre-built set of run lists.
   params:
     name:       DST_TPCCALIB_run2pp
     build:      new
     build_name: new
     dbtag:      2023p011
     logbase :   $(name)_$(build)_$(tag)-$INT(run,%08d)-$INT(seg,%04d)
     outbase :   $(name)_$(build)_$(tag)
     script  :   run_cosmics.sh
     payload :   /direct/sphenix+u/sphnxpro/slurp-examples/sPHENIX/cosmics/
     mem     :   2048MB
     neventsper: 500
#    mem     :   8192MB
     mem     :   16384MB

   #
   # input query:
   #
   # This builds a list of all runs known to the file catalog "datasets" table.
   # The query should return:
   # 1. The source of the information (formatted as database name/table name)
   # 2. The run number
   # 3. A sequence number (a placeholder fixed at zero for event builders)
   # 4. And a space-separated list of logical filenames 
   #
   # The {*_condition} parameters (run, seg, limit) are substituted by kaedama
   # based on (optional) command line options.
   #
   input:
      db: daqdb
      direct_path: /sphenix/lustre01/sphnxpro/commissioning/tpc/calib/
      query: |-
         select 
                'daqdb/filelist'                                                                                    as source      , 
                runnumber                                                                                                          , 
                0                                                                                                   as segment     , 
                string_agg( distinct split_part(filename,'/',-1), ' ' )                                             as files       ,   
                string_agg( distinct split_part(filename,'/',-1) || ':' || firstevent || ':' || lastevent, ' ' )    as fileranges  
         from  
                filelist
         where 
                filename     like '/bbox%/TPC%calib%.evt'
                {run_condition}
         group by runnumber
         having
                every(transferred_to_sdcc)                                            
         order by runnumber
                {limit_condition}
              ;              

   # TODO:  Need to add error checking to make sure that outdir, logdir, etc... are quoted properly.  Else, this will cause problems with argument substitution
   filesystem:  
     outdir : "/sphenix/lustre01/sphnxpro/commissioning/slurp/tpccalib/run_$(rungroup)"
     logdir : "file:///sphenix/data/data02/sphnxpro/testlogs/run_$(rungroup)"
     condor :        "/tmp/testlogs/run_$(rungroup)"

   #
   # Again I note the need to ensure that the arguments are properly specified given the
   # definition of the payload script.
   #
   job:
     executable            : "{payload}/run_cosmics.sh"
     arguments             : "$(nevents) {outbase} {logbase} $(run) $(seg) {outdir} $(build) $(tag) $(inputs) $(ranges) {neventsper}"
     output_destination    : '{logdir}'
     transfer_input_files  : "{payload},cups.py,odbc.ini"
     output                : '{logbase}.condor.stdout'
     error                 : '{logbase}.condor.stderr'
     log                   : '{condor}/{logbase}.condor'
     accounting_group      : "group_sphenix.mdc2"
     accounting_group_user : "sphnxpro"
     transfer_output_files : '{logbase}.out,{logbase}.err'
#    transfer_output_files : 'stdout.log,stderr.log'
     priority : '3800'

