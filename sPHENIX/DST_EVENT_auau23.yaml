#_______________________________________________________________________________________________________DST_EVENT__
#
# kaedama.py --rule DST_EVENT --config examples/sPHENIX/DST_EVENT_aua23.yaml --runs ...
#
DST_EVENT:
 
   params:
     name:       DST_EVENT_auau23
     build:      new
     build_name: new
     dbtag:      2023p008
     logbase :   $(name)_$(build)_$(tag)-$INT(run,%08d)-$INT(seg,%04d)
     outbase :   $(name)_$(build)_$(tag)
     script  :   run.sh
     payload :   ./slurp-examples/sPHENIX/eventcombine/
     mem     :   4096MB   

   #
   # input query:
   #
   # This builds a list of all runs known to the file catalog "datasets" table.
   # The query should return:
   # 1. The source of the information (formatted as database name/table name)
   # 2. The run number
   # 3. A sequence number (a placeholder fixed at zero for event builders)
   # 4. And a space-separated list of logical filenames 
   #
   # The {*_condition} parameters (run, seg, limit) are substituted by kaedama
   # based on (optional) command line options.
   #
   input:
      db: daqdb
      query: |-
         select 
                'daqdb/filelist'                                                 as source  , 
                runnumber                                                                   , 
                0                                                                as segment , 
                string_agg( distinct split_part(filename,'/',-1), ' ' )    as files,   
                string_agg( distinct split_part(filename,'/',-1) || ':' || firstevent || ':' || lastevent              , ' ' )    as fileranges

         from  
                filelist
         where 
                filename     like '/bbox%' and
                filename not like '%intt%' and
                filename not like '%LL1%'  and
                filename not like '%GL1%'  and
                filename not like '%TPC%'  and
                filename not like '%TPOT%' and                                                                                                                                                                            filename not like '%mvtx%' 
                {run_condition}
         group by runnumber
         order by runnumber
                {limit_condition}
              ;              
                
   filesystem:
     outdir : "/sphenix/lustre01/sphnxpro/slurptest/run_$(rungroup)"
     logdir : "file:///sphenix/data/data02/sphnxpro/testlogs/run_$(rungroup)"
     condor :        "/tmp/testlogs/run_$(rungroup)"

   #
   # Again I note the need to ensure that the arguments are properly specified given the
   # definition of the payload script.
   #
   job:
     executable            : "{payload}/run.sh"
     user_job_wrapper      : "init.sh"
     arguments             : "$(nevents) {outbase} {logbase} {outdir} $(run) $(seg) $(ClusterId) $(ProcId) $(build) $(tag) $(inputs) $(ranges)"
     output_destination    : '{logdir}'
     transfer_input_files  : "{payload},cups.py,init.sh,pull.py,odbc.ini"
     output                : '{logbase}.condor.stdout'
     error                 : '{logbase}.condor.stderr'
     log                   : '{condor}/{logbase}.condor'
     accounting_group      : "group_sphenix.mdc2"
     accounting_group_user : "sphnxpro"
     transfer_output_files : '$(name)_$(build)_$(tag)-$INT(run,%08d)-$INT(seg,%04d).out,$(name)_$(build)_$(tag)-$INT(run,%08d)-$INT(seg,%04d).err'  
     priority : '3800'